/*
 * Copyright (c) 2014-2017 Afero, Inc. All rights reserved.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName rootProject.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(path: ':afero-sdk-core')

    testCompile 'junit:junit:4.12'
}

publishing {
    publications {
        aar(MavenPublication) {
            version = rootProject.version
            artifactId project.getName()
            groupId rootProject.group

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("_releaseCompile").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    // don't include local dependencies
                    if (it.moduleVersion != 'unspecified') {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "${rootProject.name} - ${rootProject.version}"
        description "Generates Javadoc for $variant.name."

        source = variant.javaCompile.source
        destinationDir = project.file("$project.buildDir/javadoc/${project.getName()}")
        classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())

        options {
            links "http://docs.oracle.com/javase/8/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task("bundle${variant.name.capitalize()}Javadoc", type: Jar) {
        baseName = "${rootProject.name} - ($version)"
        description "Bundles Javadoc into zip for $variant.name."
        classifier = "javadoc"
        from tasks["generate${variant.name.capitalize()}Javadoc"]
    }
}
