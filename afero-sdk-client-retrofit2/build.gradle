/*
 * Copyright (c) 2014-2017 Afero, Inc. All rights reserved.
 */

apply plugin: 'java'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(path: ':afero-sdk-core')

    // https://github.com/square/retrofit
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    compile 'com.squareup.retrofit2:retrofit-mock:2.3.0'

    // https://github.com/square/okhttp
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // https://github.com/FasterXML/jackson
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.5'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'

    // https://github.com/ReactiveX/RxJava
    compile 'io.reactivex:rxjava:1.3.0'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

publishing {
    publications {
        jar(MavenPublication) {
            version = project.sdkVersion
            artifactId project.getName()
            groupId project.sdkGroupId

            // Tell maven to prepare the generated "*.jar" file for publishing
            artifact("$buildDir/libs/${project.getName()}.jar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("compile").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    // don't include local dependencies
                    if (!it.moduleVersion.equals('unspecified')) {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }
    }
}
